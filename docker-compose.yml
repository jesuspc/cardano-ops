version: "3.5"

services:
  cardano-node:
    image: inputoutput/cardano-node:1.35.4
    command: [
      "run",
      "--config", "/config/config.json",
      "--database-path", "/data/db",
      "--socket-path", "/ipc/node.socket",
      "--topology", "/config/topology.json"
    ]
    ports:
      - 12798:12798
    volumes:
      - ./config/cardano-node/network/${NETWORK:-mainnet}:/config
      - node-db:/data
      - node-ipc:/ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "400k"
        max-file: "20"

  postgres:
    image: postgres:11.5-alpine
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-db-sync:
    image: inputoutput/cardano-db-sync:12.0.2
    environment:
      - NETWORK=${NETWORK:-mainnet}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
    depends_on:
      - cardano-node
      - postgres
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    volumes:
      - db-sync-data:/var/lib/cdbsync
      - node-ipc:/node-ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cardano-node:cardano-node
    restart: always

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3020:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    restart: always

  # ogmios:
  #   image: cardanosolutions/ogmios:latest-${NETWORK:-mainnet}
  #   build:
  #     context: .
  #     target: ogmios
  #     cache_from: [cardanosolutions/ogmios:latest]
  #   restart: on-failure
  #   command: [
  #     "--host", "0.0.0.0",
  #     "--node-socket", "/ipc/node.socket",
  #     "--node-config", "/config/cardano-node/config.json"
  #   ]
  #   volumes:
  #     - ./server/config/network/${NETWORK:-mainnet}:/config
  #     - node-ipc:/ipc
  #   ports:
  #     - ${OGMIOS_PORT:-1337}:1337

  # hasura:
  #   # build:
  #   #   context: . #./packages/api-cardano-db-hasura/hasura
  #   image: inputoutput/cardano-graphql-hasura:${CARDANO_GRAPHQL_VERSION:-6.2.0}
  #   ports:
  #     - ${HASURA_PORT:-8090}:8080
  #   depends_on:
  #     - postgres
  #   restart: on-failure
  #   environment:
  #     - HASURA_GRAPHQL_ENABLE_CONSOLE=true
  #     - HASURA_GRAPHQL_CORS_DOMAIN=http://localhost:9695
  #   secrets:
  #     - postgres_db
  #     - postgres_password
  #     - postgres_user
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "200k"
  #       max-file: "10"

  # cardano-graphql:
  #   # build:
  #   #   args:
  #   #     - NETWORK=${NETWORK:-mainnet}
  #   #     - METADATA_SERVER_URI=${METADATA_SERVER_URI:-https://tokens.cardano.org}
  #   #   cache_from: [ inputoutput/cardano-graphql:latest ]
  #   #   context: .
  #   #   target: server
  #   image: inputoutput/cardano-graphql:${CARDANO_GRAPHQL_VERSION:-6.2.0}-${NETWORK:-mainnet}
  #   environment:
  #     - ALLOW_INTROSPECTION=true
  #     - CACHE_ENABLED=true
  #     - LOGGER_MIN_SEVERITY=${LOGGER_MIN_SEVERITY:-info}
  #   expose:
  #     - ${API_PORT:-3100}
  #   ports:
  #     - ${API_PORT:-3100}:3100
  #   restart: on-failure
  #   secrets:
  #     - postgres_db
  #     - postgres_password
  #     - postgres_user
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "200k"
  #       max-file: "10"

secrets:
  postgres_db:
    file: ./config/secrets/postgres_db
  postgres_password:
    file: ./config/secrets/postgres_password
  postgres_user:
    file: ./config/secrets/postgres_user

volumes:
  db-sync-data:
  postgres:
  node-db:
  node-ipc:
  prometheus_data:
  grafana_data:
